"use strict";
// Assuming you have these selects and divs already in your HTML:
const selectcar1 = document.getElementById("selectcar1");
const selectcar2 = document.getElementById("selectcar2");
const div1 = document.getElementById("div1");
const div2 = document.getElementById("div2");
const div3 = document.getElementById("div3");
const div4 = document.getElementById("div4");
const div5 = document.getElementById("div5");
const div6 = document.getElementById("div6");
const div7 = document.getElementById("div7");
const div8 = document.getElementById("div8");
const addCarButton = document.getElementById("addCarButton"); // Your + button
const popup = document.getElementById("addCarPopup");
const inputName = document.getElementById("inputName");
const inputModel = document.getElementById("inputModel");
const inputPrice = document.getElementById("inputPrice");
const inputYear = document.getElementById("inputYear");
const inputEngine = document.getElementById("inputEngine");
const addCarSubmit = document.getElementById("addCarSubmit");
const addCarCancel = document.getElementById("addCarCancel");
let currentCar1 = selectcar1.value;
let currentCar2 = selectcar2.value;
// Store cars locally for quick lookup:
let carsMap = {};
// Load car data for a car id from server:
async function loadCarData(carName) {
    try {
        const response = await fetch("/loadcar", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name: carName }),
        });
        if (!response.ok)
            return null;
        const car = await response.json();
        carsMap[carName] = car; // cache
        return car;
    }
    catch {
        return null;
    }
}
async function updateComparison() {
    // Load data for car1
    let car1 = carsMap[currentCar1] || await loadCarData(currentCar1);
    if (!car1) {
        // fallback if no data
        div1.textContent = div3.textContent = div5.textContent = div7.textContent = "N/A";
    }
    else {
        div1.textContent = car1.model;
        div3.textContent = car1.price.toString();
        div5.textContent = car1.year.toString();
        div7.textContent = car1.engine;
    }
    // Load data for car2
    let car2 = carsMap[currentCar2] || await loadCarData(currentCar2);
    if (!car2) {
        div2.textContent = div4.textContent = div6.textContent = div8.textContent = "N/A";
    }
    else {
        div2.textContent = car2.model;
        div4.textContent = car2.price.toString();
        div6.textContent = car2.year.toString();
        div8.textContent = car2.engine;
    }
}
selectcar1.onchange = () => {
    currentCar1 = selectcar1.value;
    updateComparison();
};
selectcar2.onchange = () => {
    currentCar2 = selectcar2.value;
    updateComparison();
};
addCarButton.onclick = () => {
    popup.style.display = "block";
};
addCarCancel.onclick = () => {
    popup.style.display = "none";
};
addCarSubmit.onclick = async () => {
    // Basic validation
    if (!inputName.value.trim() ||
        !inputModel.value.trim() ||
        !inputPrice.value ||
        !inputYear.value ||
        !inputEngine.value.trim()) {
        alert("Please fill all fields");
        return;
    }
    const newCar = {
        id: inputName.value.trim(),
        model: inputModel.value.trim(),
        price: parseInt(inputPrice.value),
        year: parseInt(inputYear.value),
        engine: inputEngine.value.trim(),
    };
    // Send to server
    try {
        const response = await fetch("/addcar", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newCar),
        });
        if (!response.ok)
            throw new Error("Failed to add car");
        // Update selects with new car
        const option1 = new Option(newCar.id, newCar.id);
        const option2 = new Option(newCar.id, newCar.id);
        selectcar1.add(option1);
        selectcar2.add(option2);
        // Cache car locally
        carsMap[newCar.id] = newCar;
        // Optionally select the newly added car on both selects
        selectcar1.value = newCar.id;
        selectcar2.value = newCar.id;
        currentCar1 = currentCar2 = newCar.id;
        updateComparison();
        // Clear inputs and hide popup
        inputName.value = "";
        inputModel.value = "";
        inputPrice.value = "";
        inputYear.value = "";
        inputEngine.value = "";
        popup.style.display = "none";
    }
    catch (e) {
        alert("Error adding car: " + (e instanceof Error ? e.message : ""));
    }
};
// Initial load
updateComparison();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXBhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlFQUFpRTtBQUNqRSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBc0IsQ0FBQztBQUM5RSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBc0IsQ0FBQztBQUU5RSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQztBQUUvRCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBc0IsQ0FBQyxDQUFDLGdCQUFnQjtBQUVuRyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBbUIsQ0FBQztBQUN2RSxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBcUIsQ0FBQztBQUMzRSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsY0FBYyxD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